<html>
<style>

body {
	background: black;
	color: white;
	font-family: monospace;
}

p {
    display: block;
    margin-block-start: 0em;
    margin-block-end: 0em;
    margin-inline-start: 0px;
    margin-inline-end: 0px;
}

textArea {
	background: black;
	color: white;
	width: 100%;
	height: calc(30% - 4em);
	resize: none; 
}

input {
	background: black;
	color: white;
	resize: none; 
	border: 1px solid #fff;
	border-radius: 2px;
}

button {
  background-color: transparent;
  color: #fff;
  border: 1px solid #fff;
  border-radius: 2px;
  padding: 5px 10px;
  cursor: pointer;
  font-family: monospace;
}

button:hover {
  background-color: #333;
  color: #fff;
}

button:active {
  background-color: #333;
  color: #fff;
}

</style>

<body>
Error Correction Capacity Tester
<br></br>

Required error correction capacity per codeword:<input type="number" id='errorCapacityEntry' value=1>
<br></br>

Instructions - keys must be of fixed length:
<textArea id='instructionsText'>
000000=0
010101=1
101010=2
111111=3</textArea>
<br></br>

Error Correction Outcomes:
<textArea readonly id='outputText'></textArea>

<script>

const outputText = document.getElementById('outputText')
const errorCapacityEntry = document.getElementById('errorCapacityEntry')
const instructionsText = document.getElementById('instructionsText')

function generateAllPossibleBinary(length) {
	var results = []
	var maxValue = 2 ** length
	
	for (var i=0; i<maxValue; i++) {
		results.push( ('0'.repeat(length) + i.toString(2)).substr(-1*length,)  )
	}
	return results
}

function hammingDistance(b1, b2) {
	var distance = 0
	
	for (var i=0; i<b1.length; i++) {
		if (b1[i] != b2[i]) { distance += 1 }
	}
	
	return distance
}

function update() {

	var input = instructionsText.value.split('\n')
	var allCodes = generateAllPossibleBinary(input[0].split('=')[0].length);
	var codewords = []
	var errorCapacity = parseInt(errorCapacityEntry.value)
	var minDistance = errorCapacity + 1;
	
	input.forEach( function a(line) {
		codewords.push( line.split('=') )
	})
	
	var matched = []
	var result = ''
	var match = ''
	var fail = false
	codewords.forEach( function e1(b1) {
		allCodes.forEach( function e2(b2) {
			
			if ( hammingDistance(b1[0], b2) < minDistance) {
				match = ''
				if (matched.indexOf(b2) >= 0) {
					match = ' NOT DISTINCT '
					fail = true
				} else {
					matched.push(b2)
				}
				
				result += b2 + '=' + b1[1] + match + '\n'
			}
		})
	})
	
	if (fail) { result = 'Codewords do not meet error correction capacity requirements!\n\n' + result }
	else { result = 'All codewords valid and distinct!\n\n' + result  }
	
	outputText.value = result;
}

instructionsText.addEventListener('input', update);
errorCapacityEntry.addEventListener('input', update);

update()

</script>
